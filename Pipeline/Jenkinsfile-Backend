pipeline {
    agent any 
    tools {
        nodejs 'nodejs'
    }
    environment {
        SCANNER_HOME = tool 'sonar-scanner'
        AWS_ACCOUNT_ID = credentials('ACCOUNT_ID')
        AWS_ECR_REPO_NAME = credentials('ECR_REPO2')
        AWS_DEFAULT_REGION = 'us-east-1'
        REPOSITORY_URI = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com"
        GIT_REPO_NAME = "Three-Tier-MERN-Stack-Application-Deployment-with-DevOps"        
        GIT_USER_NAME = "dmz-v-x"         
    }
    
    stages {
        stage('Cleaning Workspace') {
            steps {
                cleanWs()
            }
        }
        
        stage('Checkout from Git') {
            steps {
                git branch: 'main', url: "https://github.com/${env.GIT_USER_NAME}/${env.GIT_REPO_NAME}"
            }
        }
        
        stage('Sonarqube Analysis') {
            steps {
                dir('NoteFlow/backend') {
                    withSonarQubeEnv('sonar-server') {
                        sh '''
                            $SCANNER_HOME/bin/sonar-scanner \
                            -Dsonar.projectName=backend \
                            -Dsonar.projectKey=backend
                        '''
                    }
                }
            }
        }
        
        stage('Quality Check') {
            steps {
                script {
                    waitForQualityGate abortPipeline: false, credentialsId: 'sonar-token' 
                }
            }
        }
        
        stage('OWASP Dependency-Check Scan') {
            steps {
                dir('NoteFlow/backend') {
                    dependencyCheck additionalArguments: '--scan ./ --disableYarnAudit --disableNodeAudit', 
                                  odcInstallation: 'DP-Check'
                    dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
                }
            }
        }
        
        stage('Trivy File Scan') {
            steps {
                dir('NoteFlow/backend') {
                    sh 'trivy fs . > trivyfs.txt'
                }
            }
        }
        
        stage("Docker Image Build") {
            steps {
                script {
                    dir('NoteFlow/backend') {
                        sh '''
                            docker system prune -f
                            docker container prune -f
                            docker build -t ${REPOSITORY_URI}/${AWS_ECR_REPO_NAME}:${BUILD_NUMBER} .
                        '''
                    }
                }
            }
        }

        stage("TRIVY Image Scan") {
            steps {
                script {
                    dir('NoteFlow/backend') {
                        sh '''
                            trivy image ${REPOSITORY_URI}/${AWS_ECR_REPO_NAME}:${BUILD_NUMBER} > trivyimage.txt
                        '''
                    }
                }
            }
        }
        
        stage("ECR Image Pushing") {
            steps {
                script {
                    sh '''
                        aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin ${REPOSITORY_URI}
                        docker push ${REPOSITORY_URI}/${AWS_ECR_REPO_NAME}:${BUILD_NUMBER}
                    '''
                }
            }
        }
        
        
        stage('Update Kubernetes Manifests') {
            steps {
                dir('k8s/backend') {
                    withCredentials([usernamePassword(credentialsId: 'GITHUB-APP', usernameVariable: 'GIT_USER_NAME', passwordVariable: 'GITHUB_TOKEN')]) {
                        sh '''
                            git config user.email "hbhatt034@gmail.com"
                            git config user.name "Himanshu Bhatt"
                            
                            # Update the deployment image
                            sed -i "s|image:.*|image: ${REPOSITORY_URI}/${AWS_ECR_REPO_NAME}:${BUILD_NUMBER}|" deployment.yaml

                            # Commit and push changes
                            git add deployment.yaml
                            git commit -m "Update backend deployment to version ${BUILD_NUMBER}"
                            git push https://${GIT_USER_NAME}:${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
                        '''
                    }
                }
            }
        }
    }
    
    post {
        always {
            cleanWs()
        }
        success {
            echo 'Pipeline succeeded!'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}
